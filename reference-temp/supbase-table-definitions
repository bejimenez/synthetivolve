definition for calorie_calculations
create table public.calorie_calculations (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  bmr numeric(7, 2) not null,
  tdee numeric(7, 2) not null,
  activity_multiplier numeric(3, 2) not null,
  weight_lbs numeric(5, 2) not null,
  age integer not null,
  calculation_date date not null default CURRENT_DATE,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint calorie_calculations_pkey primary key (id),
  constraint calorie_calculations_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_calorie_calculations_user_id on public.calorie_calculations using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_calorie_calculations_date on public.calorie_calculations using btree (calculation_date desc) TABLESPACE pg_default;

create index IF not exists idx_calorie_calculations_user_date on public.calorie_calculations using btree (user_id, calculation_date desc) TABLESPACE pg_default;

create trigger update_calorie_calculations_updated_at BEFORE
update on calorie_calculations for EACH row
execute FUNCTION update_updated_at_column ();

defintion for daily_targets:
create table public.daily_targets (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  goal_id uuid not null,
  target_date date not null,
  recommended_calories numeric(7, 2) not null,
  recommended_protein numeric(6, 2) not null,
  recommended_fat numeric(6, 2) not null,
  recommended_carbs numeric(6, 2) not null,
  created_at timestamp without time zone null default now(),
  constraint daily_targets_pkey primary key (id),
  constraint daily_targets_user_id_target_date_key unique (user_id, target_date),
  constraint daily_targets_goal_id_fkey foreign KEY (goal_id) references goals (id) on delete CASCADE,
  constraint daily_targets_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE,
  constraint daily_targets_recommended_calories_check check ((recommended_calories >= (1100)::numeric))
) TABLESPACE pg_default;

create index IF not exists idx_daily_targets_user_date on public.daily_targets using btree (user_id, target_date) TABLESPACE pg_default;

create index IF not exists idx_daily_targets_goal on public.daily_targets using btree (goal_id) TABLESPACE pg_default;

definition for day_exercises:
create table public.day_exercises (
  id uuid not null default gen_random_uuid (),
  day_id uuid null,
  exercise_id uuid null,
  order_index integer not null,
  created_at timestamp with time zone null default now(),
  constraint day_exercises_pkey primary key (id),
  constraint day_exercises_day_id_order_index_key unique (day_id, order_index),
  constraint day_exercises_day_id_fkey foreign KEY (day_id) references mesocycle_days (id) on delete CASCADE,
  constraint day_exercises_exercise_id_fkey foreign KEY (exercise_id) references exercises (id) on delete CASCADE
) TABLESPACE pg_default;

definition for exercise_logs:
create table public.exercise_logs (
  id uuid not null default gen_random_uuid (),
  workout_log_id uuid null,
  exercise_id uuid null,
  order_index integer not null,
  replaced_original boolean null default false,
  was_accessory boolean null default false,
  created_at timestamp with time zone null default now(),
  constraint exercise_logs_pkey primary key (id),
  constraint exercise_logs_exercise_id_fkey foreign KEY (exercise_id) references exercises (id) on delete CASCADE,
  constraint exercise_logs_workout_log_id_fkey foreign KEY (workout_log_id) references workout_logs (id) on delete CASCADE
) TABLESPACE pg_default;

definition for exercises:
create table public.exercises (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  name text not null,
  primary_muscle_group text not null,
  secondary_muscle_groups text[] null default '{}'::text[],
  equipment text null,
  notes text null,
  use_rir_rpe boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  deleted_at timestamp with time zone null,
  constraint exercises_pkey primary key (id),
  constraint exercises_user_id_name_key unique (user_id, name),
  constraint exercises_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint exercises_primary_muscle_group_check check (
    (
      primary_muscle_group = any (
        array[
          'CHEST'::text,
          'BACK'::text,
          'SHOULDERS'::text,
          'TRICEPS'::text,
          'BICEPS'::text,
          'QUADS'::text,
          'HAMSTRINGS'::text,
          'GLUTES'::text,
          'CALVES'::text,
          'ABS'::text,
          'FOREARMS'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_exercises_user_id on public.exercises using btree (user_id) TABLESPACE pg_default
where
  (deleted_at is null);

create trigger update_exercises_updated_at BEFORE
update on exercises for EACH row
execute FUNCTION update_updated_at_column ();

definition for food_logs:
create table public.food_logs (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  food_id uuid null,
  quantity numeric(8, 2) not null,
  unit text not null,
  logged_at timestamp without time zone not null,
  logged_date date not null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint food_logs_pkey primary key (id),
  constraint food_logs_food_id_fkey foreign KEY (food_id) references foods (id),
  constraint food_logs_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_food_logs_user_date on public.food_logs using btree (user_id, logged_date) TABLESPACE pg_default;

create index IF not exists idx_food_logs_user_timestamp on public.food_logs using btree (user_id, logged_at) TABLESPACE pg_default;

create trigger update_food_logs_updated_at BEFORE
update on food_logs for EACH row
execute FUNCTION update_updated_at_column ();

definition for foods:
create table public.foods (
  id uuid not null default gen_random_uuid (),
  fdc_id integer null,
  description text not null,
  brand_name text null,
  serving_size numeric(8, 2) null,
  serving_unit text null,
  calories_per_100g numeric(7, 2) null,
  protein_per_100g numeric(6, 2) null,
  fat_per_100g numeric(6, 2) null,
  carbs_per_100g numeric(6, 2) null,
  fiber_per_100g numeric(6, 2) null,
  sugar_per_100g numeric(6, 2) null,
  sodium_per_100g numeric(8, 2) null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint foods_pkey primary key (id),
  constraint foods_fdc_id_key unique (fdc_id)
) TABLESPACE pg_default;

create index IF not exists idx_foods_fdc_id on public.foods using btree (fdc_id) TABLESPACE pg_default;

create index IF not exists idx_foods_description on public.foods using btree (description) TABLESPACE pg_default;

create trigger update_foods_updated_at BEFORE
update on foods for EACH row
execute FUNCTION update_updated_at_column ();

definition for goals:
create table public.goals (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  goal_type text not null,
  start_weight numeric(5, 2) not null,
  start_date date not null default CURRENT_DATE,
  duration_weeks integer not null,
  end_date date GENERATED ALWAYS as ((start_date + (duration_weeks * 7))) STORED null,
  target_rate_lbs numeric(4, 2) null,
  target_rate_percent numeric(5, 2) null,
  rate_type text null,
  surplus_calories integer null default 300,
  is_active boolean null default true,
  completed_at timestamp without time zone null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint goals_pkey primary key (id),
  constraint goals_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE,
  constraint goals_goal_type_check check (
    (
      goal_type = any (
        array[
          'fat_loss'::text,
          'maintenance'::text,
          'muscle_gain'::text
        ]
      )
    )
  ),
  constraint goals_rate_type_check check (
    (
      rate_type = any (
        array['absolute'::text, 'percentage'::text, null::text]
      )
    )
  ),
  constraint goals_surplus_calories_check check ((surplus_calories >= 100)),
  constraint goals_target_rate_lbs_check check (
    (
      (target_rate_lbs is null)
      or (
        (target_rate_lbs >= 0.5)
        and (target_rate_lbs <= 3.0)
      )
    )
  ),
  constraint goals_target_rate_percent_check check (
    (
      (target_rate_percent is null)
      or (
        (target_rate_percent >= 0.25)
        and (target_rate_percent <= 2.0)
      )
    )
  ),
  constraint rate_type_consistency check (
    (
      (
        (target_rate_lbs is not null)
        and (rate_type = 'absolute'::text)
      )
      or (
        (target_rate_percent is not null)
        and (rate_type = 'percentage'::text)
      )
      or (
        (target_rate_lbs is null)
        and (target_rate_percent is null)
        and (rate_type is null)
      )
    )
  ),
  constraint fat_loss_rate_required check (
    (
      (goal_type <> 'fat_loss'::text)
      or (
        (target_rate_lbs is not null)
        or (target_rate_percent is not null)
      )
    )
  ),
  constraint goals_duration_weeks_check check (
    (
      (duration_weeks >= 2)
      and (duration_weeks <= 16)
    )
  ),
  constraint single_active_goal EXCLUDE using btree (
    user_id
    with
      =
  )
  where
    ((is_active = true))
) TABLESPACE pg_default;

create index IF not exists idx_goals_user_active on public.goals using btree (user_id, is_active) TABLESPACE pg_default;

create index IF not exists idx_goals_end_date on public.goals using btree (end_date) TABLESPACE pg_default;

create trigger update_goals_updated_at BEFORE
update on goals for EACH row
execute FUNCTION update_updated_at ();

definition for mesocycle_days:
create table public.mesocycle_days (
  id uuid not null default gen_random_uuid (),
  mesocycle_id uuid null,
  day_number integer not null,
  created_at timestamp with time zone null default now(),
  constraint mesocycle_days_pkey primary key (id),
  constraint mesocycle_days_mesocycle_id_day_number_key unique (mesocycle_id, day_number),
  constraint mesocycle_days_mesocycle_id_fkey foreign KEY (mesocycle_id) references mesocycles (id) on delete CASCADE,
  constraint mesocycle_days_day_number_check check (
    (
      (day_number >= 1)
      and (day_number <= 7)
    )
  )
) TABLESPACE pg_default;

definition for mesocycles:
create table public.mesocycles (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  name text not null,
  weeks integer not null,
  days_per_week integer not null,
  specialization text[] null default '{}'::text[],
  goal_statement text null,
  is_template boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  deleted_at timestamp with time zone null,
  constraint mesocycles_pkey primary key (id),
  constraint mesocycles_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint mesocycles_days_per_week_check check (
    (
      (days_per_week >= 1)
      and (days_per_week <= 7)
    )
  ),
  constraint mesocycles_weeks_check check (
    (
      (weeks >= 2)
      and (weeks <= 16)
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_mesocycles_user_id on public.mesocycles using btree (user_id) TABLESPACE pg_default
where
  (deleted_at is null);

create trigger update_mesocycles_updated_at BEFORE
update on mesocycles for EACH row
execute FUNCTION update_updated_at_column ();

definition for nutrition_settings:
create table public.nutrition_settings (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  logging_start_hour integer null default 3,
  logging_end_hour integer null default 20,
  timezone text null default 'UTC'::text,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint nutrition_settings_pkey primary key (id),
  constraint nutrition_settings_user_id_key unique (user_id),
  constraint nutrition_settings_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE
) TABLESPACE pg_default;

create trigger update_nutrition_settings_updated_at BEFORE
update on nutrition_settings for EACH row
execute FUNCTION update_updated_at_column ();

definition for profiles:create table public.profiles (
  id uuid not null,
  height_inches integer null,
  biological_sex text null,
  birth_date date null,
  activity_level text null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  updated_at timestamp with time zone not null default timezone ('utc'::text, now()),
  constraint profiles_pkey primary key (id),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE,
  constraint profiles_activity_level_check check (
    (
      activity_level = any (
        array[
          'sedentary'::text,
          'lightly_active'::text,
          'moderately_active'::text,
          'very_active'::text,
          'extremely_active'::text
        ]
      )
    )
  ),
  constraint profiles_biological_sex_check check (
    (
      biological_sex = any (array['male'::text, 'female'::text])
    )
  )
) TABLESPACE pg_default;

create trigger update_profiles_updated_at BEFORE
update on profiles for EACH row
execute FUNCTION update_updated_at_column ();

definition for recent_foods:
create table public.recent_foods (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  food_id uuid null,
  last_used timestamp without time zone null default now(),
  use_count integer null default 1,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint recent_foods_pkey primary key (id),
  constraint recent_foods_user_id_food_id_key unique (user_id, food_id),
  constraint recent_foods_food_id_fkey foreign KEY (food_id) references foods (id),
  constraint recent_foods_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_recent_foods_user_last_used on public.recent_foods using btree (user_id, last_used desc) TABLESPACE pg_default;

create trigger update_recent_foods_updated_at BEFORE
update on recent_foods for EACH row
execute FUNCTION update_updated_at_column ();

definition for set_logs:
create table public.set_logs (
  id uuid not null default gen_random_uuid (),
  exercise_log_id uuid null,
  set_number integer not null,
  weight numeric(10, 2) not null,
  reps integer not null,
  rir integer null,
  rpe numeric(3, 1) null,
  created_at timestamp with time zone null default now(),
  constraint set_logs_pkey primary key (id),
  constraint set_logs_exercise_log_id_set_number_key unique (exercise_log_id, set_number),
  constraint set_logs_exercise_log_id_fkey foreign KEY (exercise_log_id) references exercise_logs (id) on delete CASCADE
) TABLESPACE pg_default;

definition for weight_entries:
create table public.weight_entries (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  weight_lbs numeric(5, 2) not null,
  entry_date date not null,
  notes text null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  constraint weight_entries_pkey primary key (id),
  constraint unique_weight_per_day_per_user unique (user_id, entry_date),
  constraint weight_entries_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists weight_entries_user_id_idx on public.weight_entries using btree (user_id) TABLESPACE pg_default;

create index IF not exists weight_entries_entry_date_idx on public.weight_entries using btree (entry_date) TABLESPACE pg_default;

create index IF not exists weight_entries_user_date_idx on public.weight_entries using btree (user_id, entry_date) TABLESPACE pg_default;

definition for workout_logs:
create table public.workout_logs (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  mesocycle_id uuid null,
  week_number integer null,
  day_number integer null,
  workout_date date not null default CURRENT_DATE,
  custom_goal_entry text null,
  started_at timestamp with time zone null default now(),
  completed_at timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  constraint workout_logs_pkey primary key (id),
  constraint workout_logs_mesocycle_id_fkey foreign KEY (mesocycle_id) references mesocycles (id) on delete set null,
  constraint workout_logs_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_workout_logs_user_id on public.workout_logs using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_workout_logs_date on public.workout_logs using btree (workout_date) TABLESPACE pg_default;

create index IF not exists idx_workout_logs_mesocycle on public.workout_logs using btree (mesocycle_id) TABLESPACE pg_default;